# Actions workflow

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    branches:
      - master
      - develop
      - 'release/*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Define NOW var
    - name: Define NOW var
      shell: bash
      run: echo "::set-env name=NOW::$(TZ=":Europe/Madrid" date +'%Y-%m-%dT%H:%M:%S')"

    # Define ENV var
    - name: Define ENV var
      shell: bash
      run: |
        echo ${GITHUB_REF##*/}
        case ${GITHUB_REF##*/} in
          master)
            export ENV=""
            export TAG=""
            echo "::set-env name=ENV::$ENV"
            echo "::set-env name=TAG::$TAG"
            echo "Deploying ${ENV:1} from ${GITHUB_REF##*/} branch at ${NOW}"
            ;;
          develop)
            export ENV="-dev"
            export TAG="dev-"
            echo "::set-env name=ENV::$ENV"
            echo "::set-env name=TAG::$TAG"
            echo "Deploying ${ENV:1} from ${GITHUB_REF##*/} branch at ${NOW}"
            ;;
          *)
            export ENV="-release"
            export TAG="release-"
            echo "::set-env name=ENV::$ENV"
            echo "::set-env name=TAG::$TAG"
            echo "Deploying ${ENV:1} from ${GITHUB_REF##*/} branch at ${NOW}"
          ;;
        esac

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    # AWS ECR login
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Docher build & push phono/api to ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: phono/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${TAG}$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${TAG}latest api/.
        docker push $ECR_REGISTRY/$ECR_REPOSITORY

    # AWS ECR logout
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    # Kubectl 1.18.2 install
    - uses: azure/setup-kubectl@v1

    # Kubectl configuration
    - name: Kubectl configuration
      shell: bash
      run: |
        mkdir  ~/.kube
        echo ${{ secrets.KUBECONFIG }} | base64 -d -i > ~/.kube/config
        kubectl version
        kubectl cluster-info
    
    # Helm 2.16.1 install
    - uses: azure/setup-helm@v1
      with:
        version: '2.16.1' # default is latest stable

    # Set up Python 3.7
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    # Display current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    # Python pip install hvac and ruamel
    - name: PIP install hvac and ruamel
      shell: bash
      run: |
        pip install hvac PyYAML ruamel.yaml

    # Unseal https://vault.marcote.org Vault
    - name: Unseal Vault
      shell: bash
      run: |
        curl --request POST --data '{"key": "'"${{ secrets.SEAL_1 }}"'"}' https://vault.marcote.org:8200/v1/sys/unseal
        sleep 1
        curl --request POST --data '{"key": "'"${{ secrets.SEAL_2 }}"'"}' https://vault.marcote.org:8200/v1/sys/unseal
        sleep 1
        curl --request POST --data '{"key": "'"${{ secrets.SEAL_3 }}"'"}' https://vault.marcote.org:8200/v1/sys/unseal
        sleep 1

    # Parse Ingress yaml file with Vault values
    - name: Parse Ingress yaml file with Vault values
      shell: bash
      run: |
        export VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}
        export MS="ingress"
        ./tools/vaultValues.py 2>&1

    # Parse API yaml file with Vault values
    - name: Parse API yaml file with Vault values
      shell: bash
      run: |
        export VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}
        export MS="api"
        ./tools/vaultValues.py 2>&1

    # Deploy Ingress phono helm chart
    - name: Deploy Ingress phono helm chart
      shell: bash
      run: |
        helm ls
        helm upgrade -i --debug phono-ingress${ENV} charts/ingress/ --namespace phono${ENV} -f charts/ingress/secrets/values${ENV}.yaml

    # Deploy API phono helm chart
    - name: Deploy API phono helm chart
      shell: bash
      run: |
        helm ls
        helm upgrade -i --debug phono-api${ENV} charts/api/ --namespace phono${ENV} -f charts/api/secrets/values${ENV}.yaml --set-string timestamp=${NOW}
